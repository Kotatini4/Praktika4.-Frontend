import React, { useState, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";
import confetti from "canvas-confetti";

const decodeHTML = (html) => {
    const txt = document.createElement("textarea");
    txt.innerHTML = html;
    return txt.value;
};

const data = [
    {
        question: "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
        correct_answer: "–ü–∞—Ä–∏–∂",
        incorrect_answers: ["–ë–µ—Ä–ª–∏–Ω", "–†–∏–º", "–ú–∞–¥—Ä–∏–¥"],
    },
    {
        question: "–ö–∞–∫–∞—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –º–∏—Ä–µ –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏?",
        correct_answer: "–†–æ—Å—Å–∏—è",
        incorrect_answers: ["–ö–∞–Ω–∞–¥–∞", "–ö–∏—Ç–∞–π", "–°–®–ê"],
    },
    {
        question: "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Ä–∞ –≠–≤–µ—Ä–µ—Å—Ç?",
        correct_answer: "–ù–µ–ø–∞–ª",
        incorrect_answers: ["–ò–Ω–¥–∏—è", "–ö–∏—Ç–∞–π", "–ü–∞–∫–∏—Å—Ç–∞–Ω"],
    },
    {
        question: "–ö–∞–∫–æ–µ —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –≤ –º–∏—Ä–µ –æ–∑–µ—Ä–æ?",
        correct_answer: "–ö–∞—Å–ø–∏–π—Å–∫–æ–µ –º–æ—Ä–µ",
        incorrect_answers: ["–ë–∞–π–∫–∞–ª", "–í–∏–∫—Ç–æ—Ä–∏—è", "–û–Ω—Ç–∞—Ä–∏–æ"],
    },
    {
        question: "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –≤ –º–∏—Ä–µ?",
        correct_answer: "–ê–º–∞–∑–æ–Ω–∫–∞",
        incorrect_answers: ["–ù–∏–ª", "–Ø–Ω—Ü–∑—ã", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"],
    },
    {
        question: "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–µ–ª–∏–∫–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è —Å—Ç–µ–Ω–∞?",
        correct_answer: "–ö–∏—Ç–∞–π",
        incorrect_answers: ["–Ø–ø–æ–Ω–∏—è", "–ú–æ–Ω–≥–æ–ª–∏—è", "–ò–Ω–¥–∏—è"],
    },
    {
        question: "–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –≥–ª—É–±–æ–∫–∏–π?",
        correct_answer: "–¢–∏—Ö–∏–π",
        incorrect_answers: ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π –ª–µ–¥–æ–≤–∏—Ç—ã–π"],
    },
    {
        question: "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≥—Ä–∞–Ω–∏—á–∏—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤?",
        correct_answer: "–ö–∏—Ç–∞–π",
        incorrect_answers: ["–†–æ—Å—Å–∏—è", "–°–®–ê", "–ë—Ä–∞–∑–∏–ª–∏—è"],
    },
    {
        question: "–ù–∞ –∫–∞–∫–æ–º –º–∞—Ç–µ—Ä–∏–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—É—Å—Ç—ã–Ω—è –°–∞—Ö–∞—Ä–∞?",
        correct_answer: "–ê—Ñ—Ä–∏–∫–∞",
        incorrect_answers: ["–ê–∑–∏—è", "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞"],
    },
    {
        question: "–ö–∞–∫–æ–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç —Å–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ –ø–ª–æ—â–∞–¥–∏?",
        correct_answer: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
        incorrect_answers: ["–ï–≤—Ä–æ–ø–∞", "–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞", "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞"],
    },
];

const Quiz = () => {
    const [current, setCurrent] = useState(0);
    const [selected, setSelected] = useState(null);
    const [score, setScore] = useState(0);
    const [finished, setFinished] = useState(false);
    const [timeLeft, setTimeLeft] = useState(90);
    const [answers, setAnswers] = useState([]);
    const timerRef = useRef(null);
    const navigate = useNavigate();
    const currentQuestion = data[current];

    useEffect(() => {
        const shuffle = () => {
            const options = [...data[current].incorrect_answers];
            const correct = data[current].correct_answer;

            if (!options.includes(correct)) {
                options.splice(
                    Math.floor(Math.random() * (options.length + 1)),
                    0,
                    correct
                );
            }

            return options;
        };

        setAnswers(shuffle());
    }, [current]);

    useEffect(() => {
        timerRef.current = setInterval(() => {
            setTimeLeft((prev) => prev - 1);
        }, 1000);

        return () => clearInterval(timerRef.current);
    }, []);

    useEffect(() => {
        if (timeLeft <= 0) {
            clearInterval(timerRef.current);
            setFinished(true);
        }
    }, [timeLeft]);

    useEffect(() => {
        if (finished) {
            confetti({
                particleCount: 150,
                spread: 100,
                origin: { y: 0.6 },
            });
        }
    }, [finished]);

    const handleAnswer = (answer) => {
        if (selected || finished) return;
        setSelected(answer);
        if (answer === currentQuestion.correct_answer) {
            setScore(score + 1);
        }
        setTimeout(() => {
            if (current + 1 < data.length) {
                setCurrent(current + 1);
                setSelected(null);
            } else {
                setFinished(true);
            }
        }, 1500);
    };

    if (finished) {
        return (
            <div
                className="d-flex justify-content-center align-items-center"
                style={{
                    minHeight: "100vh",
                    width: "100vw",
                    margin: 0,
                    padding: 0,
                    background: "linear-gradient(to right, #4facfe, #00f2fe)",
                    backgroundSize: "cover",
                    backgroundPosition: "center",
                    overflow: "hidden",
                }}
            >
                <div className="container text-center">
                    <h2 className="mb-3 text-white">üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
                    <p className="lead text-white fw-bold fs-4">
                        –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {data.length}
                    </p>
                    <div className="d-flex justify-content-center gap-3">
                        <button
                            className="btn btn-light btn-lg"
                            onClick={() => window.location.reload()}
                        >
                            –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑
                        </button>

                        <button
                            className="btn btn-light btn-lg"
                            onClick={() => (window.location.href = "/")}
                        >
                            –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        </button>
                    </div>
                </div>
            </div>
        );
    }
    return (
        <div
            className="d-flex justify-content-center align-items-center"
            style={{
                minHeight: "100vh",
                width: "100vw",
                margin: 0,
                padding: 0,
                background: "linear-gradient(to right, #4facfe, #00f2fe)", // –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                backgroundSize: "cover",
                backgroundPosition: "center",
                overflow: "hidden",
            }}
        >
            <div
                className="card shadow p-4 w-100"
                style={{ maxWidth: "600px" }}
            >
                <h4 className="mb-3">{decodeHTML(currentQuestion.question)}</h4>
                {answers.map((answer, index) => (
                    <button
                        key={index}
                        onClick={() => handleAnswer(answer)}
                        className={`btn btn-outline-primary btn-block mb-2 ${
                            selected
                                ? answer === currentQuestion.correct_answer
                                    ? "btn-success text-white"
                                    : answer === selected
                                    ? "btn-danger text-white"
                                    : ""
                                : ""
                        }`}
                    >
                        {decodeHTML(answer)}
                    </button>
                ))}
                <div className="progress my-3" style={{ height: "20px" }}>
                    <div
                        className="progress-bar progress-bar-striped progress-bar-animated bg-success"
                        role="progressbar"
                        style={{
                            width: `${((current + 1) / data.length) * 100}%`,
                        }}
                        aria-valuenow={current + 1}
                        aria-valuemin="0"
                        aria-valuemax={data.length}
                    >
                        –í–æ–ø—Ä–æ—Å {current + 1} –∏–∑ {data.length}
                    </div>
                </div>

                <p className="text-danger fw-bold">
                    –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {timeLeft} —Å–µ–∫
                </p>

                <button
                    onClick={() => setFinished(true)}
                    className="btn btn-outline-danger mt-4"
                    style={{ float: "right" }}
                >
                    –í—ã–π—Ç–∏
                </button>
            </div>
        </div>
    );
};

export default Quiz;
